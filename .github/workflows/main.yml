name: Create Feature Branch with Specific Files

on:
  push:
    branches:
      - main  # Trigger workflow on push to the main branch

jobs:
  create-feature-branch:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Git user details
      - name: Set up Git user
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@example.com"

      # Step 3: Get a list of changed files (Handle shallow repo and single commit cases)
      - name: Get changed files
        id: diff
        run: |
          # Fetch the history (ensure we are not working with a shallow repo)
          git fetch --unshallow || echo "Already a full repository."

          # Check if there is more than one commit in the repo
          COMMIT_COUNT=$(git rev-list --count HEAD)
          
          if [ "$COMMIT_COUNT" -eq 1 ]; then
            echo "Repository has only one commit, checking for modified files in the working directory."
            # If only one commit, list modified files (uncommitted changes)
            CHANGED_FILES=$(git ls-files --modified)
          else
            # Otherwise, compare changes between the last two commits
            CHANGED_FILES=$(git diff --name-only HEAD~1..HEAD)
          fi

          echo "Changed files: $CHANGED_FILES"
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV

      # Step 4: Generate unique branch name
      - name: Generate unique branch name
        id: branch_name
        run: |
          DATE=$(date +%Y%m%d-%H%M%S)
          BRANCH_NAME="feature-${DATE}"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "Branch name: $BRANCH_NAME"

      # Step 5: Create a new branch
      - name: Create new feature branch
        run: |
          git checkout -b $BRANCH_NAME
          
          # Get the list of changed files from the previous step
          CHANGED_FILES=$CHANGED_FILES
          
          # If there are changed files, check them out
          if [ ! -z "$CHANGED_FILES" ]; then
            git checkout HEAD -- $CHANGED_FILES
          fi

          # Stage the changes and commit them
          git add .
          git commit -m "Create feature branch with specific files: $CHANGED_FILES"

      # Step 6: Push the new feature branch to the repository
      - name: Push the feature branch
        run: |
          git push origin $BRANCH_NAME
